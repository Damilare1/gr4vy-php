<?php
/**
 * CardRulesApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Gr4vy\Test\Api;

use \Gr4vy\Gr4vyConfig;
use \Gr4vy\Api\CardRulesApi;
use \GuzzleHttp\Client;
use \Gr4vy\Configuration;
use \Gr4vy\ApiException;
use \Gr4vy\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * CardRulesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CardRulesApiTest extends TestCase
{
    private static $privateKeyLocation = __DIR__ . "/../dev-key.pem";
    private static $gr4vyId = "spider";

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addCardRule
     *
     * Create card rule.
     *
     */
    public function testAddCardRule()
    {
        try {
            $config = new Gr4vyConfig(self::$gr4vyId, self::$privateKeyLocation);
            $apiInstance = new CardRulesApi(new Client(),$config->getConfig());

            $conditions = array(array("match"=>"number", "key"=>"amount","operator"=>">", "value"=>100));
            $cardrule_request = array("conditions"=>$conditions, "payment_service_ids"=>array("ce26a7d7-fec0-4d47-8efa-044a32b09bc6"), "active"=>false);
            $result = $apiInstance->addCardRule($cardrule_request);

            $this->assertArrayHasKey("id", $result);

            $result = $apiInstance->deleteCardRule($result->getId());
            $this->assertEmpty($result);
        } catch (Exception $e) {
            print_r($e);
            $this->fail("Exception thrown: " . $e->getMessage());
        }
    }

    /**
     * Test case for deleteCardRule
     *
     * Delete card rule.
     *
     */
    public function testDeleteCardRule()
    {
        try {
            $config = new Gr4vyConfig(self::$gr4vyId, self::$privateKeyLocation);
            $apiInstance = new CardRulesApi(new Client(),$config->getConfig());

            $conditions = array(array("match"=>"number", "key"=>"amount","operator"=>">", "value"=>100));
            $cardrule_request = array("conditions"=>$conditions, "payment_service_ids"=>array("ce26a7d7-fec0-4d47-8efa-044a32b09bc6"), "active"=>false);
            $result = $apiInstance->addCardRule($cardrule_request);

            $this->assertArrayHasKey("id", $result);

            $result = $apiInstance->deleteCardRule($result->getId());
            $this->assertEmpty($result);
        } catch (Exception $e) {
            print_r($e);
            $this->fail("Exception thrown: " . $e->getMessage());
        }
    }

    /**
     * Test case for getCardRule
     *
     * Get card rule.
     *
     */
    public function testGetCardRule()
    {
        try {
            $config = new Gr4vyConfig(self::$gr4vyId, self::$privateKeyLocation);
            $apiInstance = new CardRulesApi(new Client(),$config->getConfig());

            $conditions = array(array("match"=>"number", "key"=>"amount","operator"=>">", "value"=>100));
            $cardrule_request = array("conditions"=>$conditions, "payment_service_ids"=>array("ce26a7d7-fec0-4d47-8efa-044a32b09bc6"), "active"=>false);
            $result = $apiInstance->addCardRule($cardrule_request);

            $this->assertArrayHasKey("id", $result);

            $result = $apiInstance->getCardRule($result["id"]);

            $this->assertArrayHasKey("id", $result);

            $result = $apiInstance->deleteCardRule($result->getId());
            $this->assertEmpty($result);
        } catch (Exception $e) {
            print_r($e);
            $this->fail("Exception thrown: " . $e->getMessage());
        }
    }

    /**
     * Test case for listCardsRules
     *
     * List card rules.
     *
     */
    public function testListCardsRules()
    {
        $this->markTestIncomplete('Not implemented');
        try {
            $config = new Gr4vyConfig(self::$gr4vyId, self::$privateKeyLocation);
            $apiInstance = new CardRulesApi(new Client(),$config->getConfig());
            $result = $apiInstance->listCardsRules();

            print_r($result);
            $this->assertGreaterThan(0, count($result->getItems()), "Expected items to be greater than 0.");
        } catch (Exception $e) {
            $this->fail("Exception thrown: " . $e->getMessage());
        }
    }

    /**
     * Test case for updateCardRule
     *
     * Update card rule.
     *
     */
    public function testUpdateCardRule()
    {
        try {
            $config = new Gr4vyConfig(self::$gr4vyId, self::$privateKeyLocation);
            $apiInstance = new CardRulesApi(new Client(),$config->getConfig());

            $conditions = array(array("match"=>"number", "key"=>"amount","operator"=>">", "value"=>100));
            $cardrule_request = array("conditions"=>$conditions, "payment_service_ids"=>array("ce26a7d7-fec0-4d47-8efa-044a32b09bc6"), "active"=>false);
            $result = $apiInstance->addCardRule($cardrule_request);

            $this->assertArrayHasKey("id", $result);

            $cardrule_update = array("active"=>true);
            $result = $apiInstance->updateCardRule($result["id"], $cardrule_update);
            $this->assertArrayHasKey("id", $result);
            $this->assertEquals($result->getActive(), true);

            $result = $apiInstance->deleteCardRule($result->getId());
            $this->assertEmpty($result);
        } catch (Exception $e) {
            print_r($e);
            $this->fail("Exception thrown: " . $e->getMessage());
        }
    }
}
