<?php
/**
 * CardRule
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * CardRule Class Doc Comment
 *
 * @category Class
 * @description A card rule that defines a custom payment provider to use for a card transaction. Multiple rules can exists at any time and they are processed by priority.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'string',
        'active' => 'bool',
        'environment' => 'string',
        'conditions' => '\Gr4vy\model\CardRuleCondition[]',
        'payment_service_ids' => 'string[]',
        'position' => 'float',
        'unprocessable_fallback_strategy' => 'string',
        'invalid_rule_fallback_strategy' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => 'uuid',
        'active' => null,
        'environment' => null,
        'conditions' => null,
        'payment_service_ids' => null,
        'position' => null,
        'unprocessable_fallback_strategy' => null,
        'invalid_rule_fallback_strategy' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'active' => 'active',
        'environment' => 'environment',
        'conditions' => 'conditions',
        'payment_service_ids' => 'payment_service_ids',
        'position' => 'position',
        'unprocessable_fallback_strategy' => 'unprocessable_fallback_strategy',
        'invalid_rule_fallback_strategy' => 'invalid_rule_fallback_strategy',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'active' => 'setActive',
        'environment' => 'setEnvironment',
        'conditions' => 'setConditions',
        'payment_service_ids' => 'setPaymentServiceIds',
        'position' => 'setPosition',
        'unprocessable_fallback_strategy' => 'setUnprocessableFallbackStrategy',
        'invalid_rule_fallback_strategy' => 'setInvalidRuleFallbackStrategy',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'active' => 'getActive',
        'environment' => 'getEnvironment',
        'conditions' => 'getConditions',
        'payment_service_ids' => 'getPaymentServiceIds',
        'position' => 'getPosition',
        'unprocessable_fallback_strategy' => 'getUnprocessableFallbackStrategy',
        'invalid_rule_fallback_strategy' => 'getInvalidRuleFallbackStrategy',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CARD_RULE = 'card-rule';
    const ENVIRONMENT_DEVELOPMENT = 'development';
    const ENVIRONMENT_STAGING = 'staging';
    const ENVIRONMENT_PRODUCTION = 'production';
    const UNPROCESSABLE_FALLBACK_STRATEGY_USE_ALL_PROVIDERS = 'use_all_providers';
    const UNPROCESSABLE_FALLBACK_STRATEGY_DECLINE = 'decline';
    const INVALID_RULE_FALLBACK_STRATEGY_USE_ALL_PROVIDERS = 'use_all_providers';
    const INVALID_RULE_FALLBACK_STRATEGY_SKIP = 'skip';
    const INVALID_RULE_FALLBACK_STRATEGY_DECLINE = 'decline';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD_RULE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvironmentAllowableValues()
    {
        return [
            self::ENVIRONMENT_DEVELOPMENT,
            self::ENVIRONMENT_STAGING,
            self::ENVIRONMENT_PRODUCTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnprocessableFallbackStrategyAllowableValues()
    {
        return [
            self::UNPROCESSABLE_FALLBACK_STRATEGY_USE_ALL_PROVIDERS,
            self::UNPROCESSABLE_FALLBACK_STRATEGY_DECLINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvalidRuleFallbackStrategyAllowableValues()
    {
        return [
            self::INVALID_RULE_FALLBACK_STRATEGY_USE_ALL_PROVIDERS,
            self::INVALID_RULE_FALLBACK_STRATEGY_SKIP,
            self::INVALID_RULE_FALLBACK_STRATEGY_DECLINE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['environment'] = $data['environment'] ?? self::ENVIRONMENT_PRODUCTION;
        $this->container['conditions'] = $data['conditions'] ?? null;
        $this->container['payment_service_ids'] = $data['payment_service_ids'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['unprocessable_fallback_strategy'] = $data['unprocessable_fallback_strategy'] ?? self::UNPROCESSABLE_FALLBACK_STRATEGY_USE_ALL_PROVIDERS;
        $this->container['invalid_rule_fallback_strategy'] = $data['invalid_rule_fallback_strategy'] ?? self::INVALID_RULE_FALLBACK_STRATEGY_USE_ALL_PROVIDERS;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnvironmentAllowableValues();
        if (!is_null($this->container['environment']) && !in_array($this->container['environment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'environment', must be one of '%s'",
                $this->container['environment'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['conditions']) && (count($this->container['conditions']) < 1)) {
            $invalidProperties[] = "invalid value for 'conditions', number of items must be greater than or equal to 1.";
        }

        $allowedValues = $this->getUnprocessableFallbackStrategyAllowableValues();
        if (!is_null($this->container['unprocessable_fallback_strategy']) && !in_array($this->container['unprocessable_fallback_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unprocessable_fallback_strategy', must be one of '%s'",
                $this->container['unprocessable_fallback_strategy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvalidRuleFallbackStrategyAllowableValues();
        if (!is_null($this->container['invalid_rule_fallback_strategy']) && !in_array($this->container['invalid_rule_fallback_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invalid_rule_fallback_strategy', must be one of '%s'",
                $this->container['invalid_rule_fallback_strategy'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type `card-rule`.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the rule.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Whether this rule is currently in use. Rules can be deactivated to allow for them to be kept around and re-activated at a later date.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string|null
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string|null $environment The environment to use this rule in. This rule will only be used for transactions created in that environment.
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        $allowedValues = $this->getEnvironmentAllowableValues();
        if (!is_null($environment) && !in_array($environment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'environment', must be one of '%s'",
                    $environment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Gr4vy\model\CardRuleCondition[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Gr4vy\model\CardRuleCondition[]|null $conditions One or more conditions that apply for this rule. Each condition needs to match for this rule to go into effect.
     *
     * @return self
     */
    public function setConditions($conditions)
    {


        if (!is_null($conditions) && (count($conditions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $conditions when calling CardRule., number of items must be greater than or equal to 1.');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets payment_service_ids
     *
     * @return string[]|null
     */
    public function getPaymentServiceIds()
    {
        return $this->container['payment_service_ids'];
    }

    /**
     * Sets payment_service_ids
     *
     * @param string[]|null $payment_service_ids A list of IDs for the payment services to use, in order of priority. The payment services all need to process cards.
     *
     * @return self
     */
    public function setPaymentServiceIds($payment_service_ids)
    {
        $this->container['payment_service_ids'] = $payment_service_ids;

        return $this;
    }

    /**
     * Gets position
     *
     * @return float|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param float|null $position The numeric rank of a rule. Rules with a lower position value are processed first.
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets unprocessable_fallback_strategy
     *
     * @return string|null
     */
    public function getUnprocessableFallbackStrategy()
    {
        return $this->container['unprocessable_fallback_strategy'];
    }

    /**
     * Sets unprocessable_fallback_strategy
     *
     * @param string|null $unprocessable_fallback_strategy Defines what strategy to use when all of the payment services defined in this rule declined or otherwise were not able to process the card.  * `use_all_providers` - Try all payment services enabled for this currency in order of priority, even if they are not listed in this rule. This is the default behaviour for a rule. * `decline` - Decline the transaction.
     *
     * @return self
     */
    public function setUnprocessableFallbackStrategy($unprocessable_fallback_strategy)
    {
        $allowedValues = $this->getUnprocessableFallbackStrategyAllowableValues();
        if (!is_null($unprocessable_fallback_strategy) && !in_array($unprocessable_fallback_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unprocessable_fallback_strategy', must be one of '%s'",
                    $unprocessable_fallback_strategy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unprocessable_fallback_strategy'] = $unprocessable_fallback_strategy;

        return $this;
    }

    /**
     * Gets invalid_rule_fallback_strategy
     *
     * @return string|null
     */
    public function getInvalidRuleFallbackStrategy()
    {
        return $this->container['invalid_rule_fallback_strategy'];
    }

    /**
     * Sets invalid_rule_fallback_strategy
     *
     * @param string|null $invalid_rule_fallback_strategy Defines what strategy to use when this rule is not valid. This can happen when the rule has triggered for a certain transaction but none of the listed payment services are eligible to process that transaction currency.  * `use_all_providers` - Try all payment services enabled for this currency in order of priority, even if they are not listed in this rule. This is the default behaviour for a rule. * `skip` - Skip this rule and instead move on to the next highest priority rule. * `decline` - Decline the transaction.
     *
     * @return self
     */
    public function setInvalidRuleFallbackStrategy($invalid_rule_fallback_strategy)
    {
        $allowedValues = $this->getInvalidRuleFallbackStrategyAllowableValues();
        if (!is_null($invalid_rule_fallback_strategy) && !in_array($invalid_rule_fallback_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invalid_rule_fallback_strategy', must be one of '%s'",
                    $invalid_rule_fallback_strategy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invalid_rule_fallback_strategy'] = $invalid_rule_fallback_strategy;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time when this rule was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The date and time when this rule was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


