<?php
/**
 * PaymentOptionContext
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * PaymentOptionContext Class Doc Comment
 *
 * @category Class
 * @description Additional context specific to the payment option. This is currently only returned for Apple Pay.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentOptionContext implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentOption_context';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_name' => 'string',
        'supported_schemes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_name' => null,
        'supported_schemes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_name' => 'merchant_name',
        'supported_schemes' => 'supported_schemes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_name' => 'setMerchantName',
        'supported_schemes' => 'setSupportedSchemes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_name' => 'getMerchantName',
        'supported_schemes' => 'getSupportedSchemes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SUPPORTED_SCHEMES_AMEX = 'amex';
    const SUPPORTED_SCHEMES_CARTES_BANCAIRES = 'cartesBancaires';
    const SUPPORTED_SCHEMES_DISCOVER = 'discover';
    const SUPPORTED_SCHEMES_EFTPOS = 'eftpos';
    const SUPPORTED_SCHEMES_ELECTRON = 'electron';
    const SUPPORTED_SCHEMES_ELO = 'elo';
    const SUPPORTED_SCHEMES_INTERAC = 'interac';
    const SUPPORTED_SCHEMES_JCB = 'jcb';
    const SUPPORTED_SCHEMES_MADA = 'mada';
    const SUPPORTED_SCHEMES_MAESTRO = 'maestro';
    const SUPPORTED_SCHEMES_MASTER_CARD = 'masterCard';
    const SUPPORTED_SCHEMES_PRIVATE_LABEL = 'privateLabel';
    const SUPPORTED_SCHEMES_VISA = 'visa';
    const SUPPORTED_SCHEMES_V_PAY = 'vPay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedSchemesAllowableValues()
    {
        return [
            self::SUPPORTED_SCHEMES_AMEX,
            self::SUPPORTED_SCHEMES_CARTES_BANCAIRES,
            self::SUPPORTED_SCHEMES_DISCOVER,
            self::SUPPORTED_SCHEMES_EFTPOS,
            self::SUPPORTED_SCHEMES_ELECTRON,
            self::SUPPORTED_SCHEMES_ELO,
            self::SUPPORTED_SCHEMES_INTERAC,
            self::SUPPORTED_SCHEMES_JCB,
            self::SUPPORTED_SCHEMES_MADA,
            self::SUPPORTED_SCHEMES_MAESTRO,
            self::SUPPORTED_SCHEMES_MASTER_CARD,
            self::SUPPORTED_SCHEMES_PRIVATE_LABEL,
            self::SUPPORTED_SCHEMES_VISA,
            self::SUPPORTED_SCHEMES_V_PAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_name'] = $data['merchant_name'] ?? null;
        $this->container['supported_schemes'] = $data['supported_schemes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name Display name of the merchant for Apple Pay.
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets supported_schemes
     *
     * @return string[]|null
     */
    public function getSupportedSchemes()
    {
        return $this->container['supported_schemes'];
    }

    /**
     * Sets supported_schemes
     *
     * @param string[]|null $supported_schemes Supported schemes for Apple Pay.
     *
     * @return self
     */
    public function setSupportedSchemes($supported_schemes)
    {
        $allowedValues = $this->getSupportedSchemesAllowableValues();
        if (!is_null($supported_schemes) && array_diff($supported_schemes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supported_schemes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supported_schemes'] = $supported_schemes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


