<?php
/**
 * PaymentService
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * PaymentService Class Doc Comment
 *
 * @category Class
 * @description An active, configured payment service.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentService implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'payment_service_definition_id' => 'string',
        'method' => 'string',
        'display_name' => 'string',
        'status' => 'string',
        'accepted_currencies' => 'string[]',
        'accepted_countries' => 'string[]',
        'credentials_mode' => 'string',
        'active' => 'bool',
        'environments' => 'string[]',
        'position' => 'float',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'type' => null,
        'payment_service_definition_id' => null,
        'method' => null,
        'display_name' => null,
        'status' => null,
        'accepted_currencies' => null,
        'accepted_countries' => null,
        'credentials_mode' => null,
        'active' => null,
        'environments' => null,
        'position' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'payment_service_definition_id' => 'payment_service_definition_id',
        'method' => 'method',
        'display_name' => 'display_name',
        'status' => 'status',
        'accepted_currencies' => 'accepted_currencies',
        'accepted_countries' => 'accepted_countries',
        'credentials_mode' => 'credentials_mode',
        'active' => 'active',
        'environments' => 'environments',
        'position' => 'position',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'payment_service_definition_id' => 'setPaymentServiceDefinitionId',
        'method' => 'setMethod',
        'display_name' => 'setDisplayName',
        'status' => 'setStatus',
        'accepted_currencies' => 'setAcceptedCurrencies',
        'accepted_countries' => 'setAcceptedCountries',
        'credentials_mode' => 'setCredentialsMode',
        'active' => 'setActive',
        'environments' => 'setEnvironments',
        'position' => 'setPosition',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'payment_service_definition_id' => 'getPaymentServiceDefinitionId',
        'method' => 'getMethod',
        'display_name' => 'getDisplayName',
        'status' => 'getStatus',
        'accepted_currencies' => 'getAcceptedCurrencies',
        'accepted_countries' => 'getAcceptedCountries',
        'credentials_mode' => 'getCredentialsMode',
        'active' => 'getActive',
        'environments' => 'getEnvironments',
        'position' => 'getPosition',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_PAYMENT_SERVICE = 'payment-service';
    const METHOD_CARD = 'card';
    const METHOD_PAYPAL = 'paypal';
    const METHOD_BANKED = 'banked';
    const STATUS_PENDING = 'pending';
    const STATUS_CREATED = 'created';
    const STATUS_FAILED = 'failed';
    const CREDENTIALS_MODE_SANDBOX = 'sandbox';
    const CREDENTIALS_MODE_LIVE = 'live';
    const ENVIRONMENTS_DEVELOPMENT = 'development';
    const ENVIRONMENTS_STAGING = 'staging';
    const ENVIRONMENTS_PRODUCTION = 'production';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PAYMENT_SERVICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_CARD,
            self::METHOD_PAYPAL,
            self::METHOD_BANKED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_CREATED,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCredentialsModeAllowableValues()
    {
        return [
            self::CREDENTIALS_MODE_SANDBOX,
            self::CREDENTIALS_MODE_LIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvironmentsAllowableValues()
    {
        return [
            self::ENVIRONMENTS_DEVELOPMENT,
            self::ENVIRONMENTS_STAGING,
            self::ENVIRONMENTS_PRODUCTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['payment_service_definition_id'] = $data['payment_service_definition_id'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['accepted_currencies'] = $data['accepted_currencies'] ?? null;
        $this->container['accepted_countries'] = $data['accepted_countries'] ?? null;
        $this->container['credentials_mode'] = $data['credentials_mode'] ?? self::CREDENTIALS_MODE_LIVE;
        $this->container['active'] = $data['active'] ?? true;
        $this->container['environments'] = $data['environments'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 200)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['payment_service_definition_id']) && (mb_strlen($this->container['payment_service_definition_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'payment_service_definition_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['payment_service_definition_id']) && (mb_strlen($this->container['payment_service_definition_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_service_definition_id', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['accepted_currencies']) && (count($this->container['accepted_currencies']) < 1)) {
            $invalidProperties[] = "invalid value for 'accepted_currencies', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['accepted_countries']) && (count($this->container['accepted_countries']) < 1)) {
            $invalidProperties[] = "invalid value for 'accepted_countries', number of items must be greater than or equal to 1.";
        }

        $allowedValues = $this->getCredentialsModeAllowableValues();
        if (!is_null($this->container['credentials_mode']) && !in_array($this->container['credentials_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'credentials_mode', must be one of '%s'",
                $this->container['credentials_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['environments']) && (count($this->container['environments']) > 3)) {
            $invalidProperties[] = "invalid value for 'environments', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['environments']) && (count($this->container['environments']) < 0)) {
            $invalidProperties[] = "invalid value for 'environments', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of this payment service.
     *
     * @return self
     */
    public function setId($id)
    {
        if (!is_null($id) && (mb_strlen($id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentService., must be smaller than or equal to 200.');
        }
        if (!is_null($id) && (mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentService., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of this resource.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets payment_service_definition_id
     *
     * @return string|null
     */
    public function getPaymentServiceDefinitionId()
    {
        return $this->container['payment_service_definition_id'];
    }

    /**
     * Sets payment_service_definition_id
     *
     * @param string|null $payment_service_definition_id The ID of the payment service definition used to create this service.
     *
     * @return self
     */
    public function setPaymentServiceDefinitionId($payment_service_definition_id)
    {
        if (!is_null($payment_service_definition_id) && (mb_strlen($payment_service_definition_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $payment_service_definition_id when calling PaymentService., must be smaller than or equal to 50.');
        }
        if (!is_null($payment_service_definition_id) && (mb_strlen($payment_service_definition_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_service_definition_id when calling PaymentService., must be bigger than or equal to 1.');
        }

        $this->container['payment_service_definition_id'] = $payment_service_definition_id;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method Defines the ID of the payment method that this service handles.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($method) && !in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The custom name set for this service.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (!is_null($display_name) && (mb_strlen($display_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling PaymentService., must be smaller than or equal to 50.');
        }
        if (!is_null($display_name) && (mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling PaymentService., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The current status of this service. This will start off as pending, move to created, and might eventually move to an error status if and when the credentials are no longer valid.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets accepted_currencies
     *
     * @return string[]|null
     */
    public function getAcceptedCurrencies()
    {
        return $this->container['accepted_currencies'];
    }

    /**
     * Sets accepted_currencies
     *
     * @param string[]|null $accepted_currencies A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     *
     * @return self
     */
    public function setAcceptedCurrencies($accepted_currencies)
    {


        if (!is_null($accepted_currencies) && (count($accepted_currencies) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accepted_currencies when calling PaymentService., number of items must be greater than or equal to 1.');
        }
        $this->container['accepted_currencies'] = $accepted_currencies;

        return $this;
    }

    /**
     * Gets accepted_countries
     *
     * @return string[]|null
     */
    public function getAcceptedCountries()
    {
        return $this->container['accepted_countries'];
    }

    /**
     * Sets accepted_countries
     *
     * @param string[]|null $accepted_countries A list of countries for which this service is enabled, in ISO two-letter code format.
     *
     * @return self
     */
    public function setAcceptedCountries($accepted_countries)
    {


        if (!is_null($accepted_countries) && (count($accepted_countries) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accepted_countries when calling PaymentService., number of items must be greater than or equal to 1.');
        }
        $this->container['accepted_countries'] = $accepted_countries;

        return $this;
    }

    /**
     * Gets credentials_mode
     *
     * @return string|null
     */
    public function getCredentialsMode()
    {
        return $this->container['credentials_mode'];
    }

    /**
     * Sets credentials_mode
     *
     * @param string|null $credentials_mode Defines if the credentials are intended for the service's live API or sandbox/test API.
     *
     * @return self
     */
    public function setCredentialsMode($credentials_mode)
    {
        $allowedValues = $this->getCredentialsModeAllowableValues();
        if (!is_null($credentials_mode) && !in_array($credentials_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'credentials_mode', must be one of '%s'",
                    $credentials_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credentials_mode'] = $credentials_mode;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Defines if this service is currently active or not.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets environments
     *
     * @return string[]|null
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     *
     * @param string[]|null $environments Determines the Gr4vy environments in which this service should be available. This can be used in combination with the `environment` parameters in the payment method and transaction APIs to route transactions through this service.
     *
     * @return self
     */
    public function setEnvironments($environments)
    {
        $allowedValues = $this->getEnvironmentsAllowableValues();
        if (!is_null($environments) && array_diff($environments, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'environments', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (!is_null($environments) && (count($environments) > 3)) {
            throw new \InvalidArgumentException('invalid value for $environments when calling PaymentService., number of items must be less than or equal to 3.');
        }
        if (!is_null($environments) && (count($environments) < 0)) {
            throw new \InvalidArgumentException('invalid length for $environments when calling PaymentService., number of items must be greater than or equal to 0.');
        }
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets position
     *
     * @return float|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param float|null $position The numeric rank of a payment service. Payment services with a lower position value are processed first.
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time when this service was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The date and time when this service was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


