<?php
/**
 * PaymentServiceRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * PaymentServiceRequest Class Doc Comment
 *
 * @category Class
 * @description Request body for activating a payment service.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentServiceRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentServiceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'fields' => '\Gr4vy\model\PaymentServiceUpdateFields[]',
        'accepted_countries' => 'string[]',
        'accepted_currencies' => 'string[]',
        'credentials_mode' => 'string',
        'active' => 'bool',
        'environments' => 'string[]',
        'position' => 'float',
        'payment_service_definition_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'fields' => null,
        'accepted_countries' => null,
        'accepted_currencies' => null,
        'credentials_mode' => null,
        'active' => null,
        'environments' => null,
        'position' => null,
        'payment_service_definition_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'display_name',
        'fields' => 'fields',
        'accepted_countries' => 'accepted_countries',
        'accepted_currencies' => 'accepted_currencies',
        'credentials_mode' => 'credentials_mode',
        'active' => 'active',
        'environments' => 'environments',
        'position' => 'position',
        'payment_service_definition_id' => 'payment_service_definition_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'fields' => 'setFields',
        'accepted_countries' => 'setAcceptedCountries',
        'accepted_currencies' => 'setAcceptedCurrencies',
        'credentials_mode' => 'setCredentialsMode',
        'active' => 'setActive',
        'environments' => 'setEnvironments',
        'position' => 'setPosition',
        'payment_service_definition_id' => 'setPaymentServiceDefinitionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'fields' => 'getFields',
        'accepted_countries' => 'getAcceptedCountries',
        'accepted_currencies' => 'getAcceptedCurrencies',
        'credentials_mode' => 'getCredentialsMode',
        'active' => 'getActive',
        'environments' => 'getEnvironments',
        'position' => 'getPosition',
        'payment_service_definition_id' => 'getPaymentServiceDefinitionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CREDENTIALS_MODE_SANDBOX = 'sandbox';
    const CREDENTIALS_MODE_LIVE = 'live';
    const ENVIRONMENTS_DEVELOPMENT = 'development';
    const ENVIRONMENTS_STAGING = 'staging';
    const ENVIRONMENTS_PRODUCTION = 'production';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCredentialsModeAllowableValues()
    {
        return [
            self::CREDENTIALS_MODE_SANDBOX,
            self::CREDENTIALS_MODE_LIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvironmentsAllowableValues()
    {
        return [
            self::ENVIRONMENTS_DEVELOPMENT,
            self::ENVIRONMENTS_STAGING,
            self::ENVIRONMENTS_PRODUCTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['fields'] = $data['fields'] ?? null;
        $this->container['accepted_countries'] = $data['accepted_countries'] ?? null;
        $this->container['accepted_currencies'] = $data['accepted_currencies'] ?? null;
        $this->container['credentials_mode'] = $data['credentials_mode'] ?? self::CREDENTIALS_MODE_LIVE;
        $this->container['active'] = $data['active'] ?? true;
        $this->container['environments'] = $data['environments'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['payment_service_definition_id'] = $data['payment_service_definition_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ((mb_strlen($this->container['display_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['fields'] === null) {
            $invalidProperties[] = "'fields' can't be null";
        }
        if ($this->container['accepted_countries'] === null) {
            $invalidProperties[] = "'accepted_countries' can't be null";
        }
        if ((count($this->container['accepted_countries']) < 1)) {
            $invalidProperties[] = "invalid value for 'accepted_countries', number of items must be greater than or equal to 1.";
        }

        if ($this->container['accepted_currencies'] === null) {
            $invalidProperties[] = "'accepted_currencies' can't be null";
        }
        if ((count($this->container['accepted_currencies']) < 1)) {
            $invalidProperties[] = "invalid value for 'accepted_currencies', number of items must be greater than or equal to 1.";
        }

        $allowedValues = $this->getCredentialsModeAllowableValues();
        if (!is_null($this->container['credentials_mode']) && !in_array($this->container['credentials_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'credentials_mode', must be one of '%s'",
                $this->container['credentials_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['environments']) && (count($this->container['environments']) > 3)) {
            $invalidProperties[] = "invalid value for 'environments', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['environments']) && (count($this->container['environments']) < 0)) {
            $invalidProperties[] = "invalid value for 'environments', number of items must be greater than or equal to 0.";
        }

        if ($this->container['payment_service_definition_id'] === null) {
            $invalidProperties[] = "'payment_service_definition_id' can't be null";
        }
        if ((mb_strlen($this->container['payment_service_definition_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'payment_service_definition_id', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['payment_service_definition_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_service_definition_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name A custom name for the payment service. This will be shown in the Admin UI.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if ((mb_strlen($display_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling PaymentServiceRequest., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling PaymentServiceRequest., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Gr4vy\model\PaymentServiceUpdateFields[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Gr4vy\model\PaymentServiceUpdateFields[] $fields A list of fields, each containing a key-value pair for each field defined by the definition for this payment service e.g. for stripe-card `secret_key` is required and so must be sent with in this field.
     *
     * @return self
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets accepted_countries
     *
     * @return string[]
     */
    public function getAcceptedCountries()
    {
        return $this->container['accepted_countries'];
    }

    /**
     * Sets accepted_countries
     *
     * @param string[] $accepted_countries A list of countries that this payment service needs to support in ISO two-letter code format.
     *
     * @return self
     */
    public function setAcceptedCountries($accepted_countries)
    {


        if ((count($accepted_countries) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accepted_countries when calling PaymentServiceRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['accepted_countries'] = $accepted_countries;

        return $this;
    }

    /**
     * Gets accepted_currencies
     *
     * @return string[]
     */
    public function getAcceptedCurrencies()
    {
        return $this->container['accepted_currencies'];
    }

    /**
     * Sets accepted_currencies
     *
     * @param string[] $accepted_currencies A list of currencies that this payment service needs to support in ISO 4217 three-letter code format.
     *
     * @return self
     */
    public function setAcceptedCurrencies($accepted_currencies)
    {


        if ((count($accepted_currencies) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accepted_currencies when calling PaymentServiceRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['accepted_currencies'] = $accepted_currencies;

        return $this;
    }

    /**
     * Gets credentials_mode
     *
     * @return string|null
     */
    public function getCredentialsMode()
    {
        return $this->container['credentials_mode'];
    }

    /**
     * Sets credentials_mode
     *
     * @param string|null $credentials_mode Defines if the credentials are intended for the service's live API or sandbox/test API.
     *
     * @return self
     */
    public function setCredentialsMode($credentials_mode)
    {
        $allowedValues = $this->getCredentialsModeAllowableValues();
        if (!is_null($credentials_mode) && !in_array($credentials_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'credentials_mode', must be one of '%s'",
                    $credentials_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credentials_mode'] = $credentials_mode;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Defines if this service is currently active or not.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets environments
     *
     * @return string[]|null
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     *
     * @param string[]|null $environments Determines the Gr4vy environments in which this service should be available. This can be used in combination with the `environment` parameters in the payment method and transaction APIs to route transactions through this service.
     *
     * @return self
     */
    public function setEnvironments($environments)
    {
        $allowedValues = $this->getEnvironmentsAllowableValues();
        if (!is_null($environments) && array_diff($environments, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'environments', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (!is_null($environments) && (count($environments) > 3)) {
            throw new \InvalidArgumentException('invalid value for $environments when calling PaymentServiceRequest., number of items must be less than or equal to 3.');
        }
        if (!is_null($environments) && (count($environments) < 0)) {
            throw new \InvalidArgumentException('invalid length for $environments when calling PaymentServiceRequest., number of items must be greater than or equal to 0.');
        }
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets position
     *
     * @return float|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param float|null $position The numeric rank of a payment service. Payment services with a lower position value are processed first. When a payment services is inserted at a position, any payment services with the the same value or higher are shifted down a position accordingly. When left out, the payment service is inserted at the end of the list.
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets payment_service_definition_id
     *
     * @return string
     */
    public function getPaymentServiceDefinitionId()
    {
        return $this->container['payment_service_definition_id'];
    }

    /**
     * Sets payment_service_definition_id
     *
     * @param string $payment_service_definition_id The ID of the payment service to use.
     *
     * @return self
     */
    public function setPaymentServiceDefinitionId($payment_service_definition_id)
    {
        if ((mb_strlen($payment_service_definition_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $payment_service_definition_id when calling PaymentServiceRequest., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($payment_service_definition_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_service_definition_id when calling PaymentServiceRequest., must be bigger than or equal to 1.');
        }

        $this->container['payment_service_definition_id'] = $payment_service_definition_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


